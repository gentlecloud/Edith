<?php
namespace Gentle\Edith\Services;

use Gentle\Edith\Events\UploadAfter;
use Gentle\Edith\Events\UploadBefore;
use Gentle\Edith\Exceptions\ServiceException;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class AttachmentService extends ModelService
{
    /**
     * 定义模型名称
     * @var string|null
     */
    protected ?string $modelName = 'Gentle\Edith\Models\EdithAttachment';

    /**
     * @return Builder
     * @throws \Gentle\Edith\Exceptions\ServiceException
     */
    public function query(): Builder
    {
        $query = parent::query(); // TODO: Change the autogenerated stub
        return $query->when(\request()->input('category_id'), function ($query) {
            $query->where('category_id', \request()->input('category_id'));
        });
    }

    /**
     * @param int $platform_id
     * @return array|null
     * @throws ServiceException
     */
    public function upfile(int $platform_id = 0)
    {
        $before = new UploadBefore(\request(), $platform_id);
        event($before); // 执行上传前事件，用于上传前的处理

        if (!($file = $before->file)) { // 如无工具模块事件存储文件 进行本地上传
            $file = $this->localUpload($platform_id);
        }
        if (!isset($file['path']) && !isset($file['url'])) {
            throw new ServiceException('上传失败');
        }

        if (!isset($file['id'])) { // 如果不存在模型索引ID 执行上传后事件
            $after = new UploadAfter(\request(), $file);
            event($after);
            $result = [
                'id' => $after->fileId,
                'url' => $file['url'] ?? $file['path'],
                'size' => $file['size'],
                'name' => $file['name']
            ];
        } else {
            $result = $file;
        }
        return $result;
    }

    /**
     * 本地上传图片
     * @param int $platformId
     * @return array
     * @throws \Gentle\Edith\Exceptions\ServiceException
     */
    protected function localUpload(int $platformId): array
    {
        $file = \request()->file('file');
        $md5 = md5_file($file->getRealPath());
        $name = $file->getClientOriginalName();

        $hasPicture = $this->query()->where('md5', $md5)->first();

        // 不存在文件，则插入数据库
        if (!$hasPicture) {
            $path = $file->store('public/uploads/attachments');
            // 获取文件大小
            $size = Storage::size($path);

            // 数据
            $data = [
                'obj_id' => $platformId,
                'name' => $name,
                'size' => $size,
                'md5' => $md5,
                'ext' => $file->getClientOriginalExtension(),
                'mime' => $file->getClientMimeType(),
                'upload_ip' => \request()->ip(),
                'path' => $path,
                'url' => env('WEB_SITE_SSL', false) !== false ? secure_asset($path) :asset(Storage::url($path))
            ];
        } else {
            if (str_starts_with($hasPicture->path,'http')) {
                $url = $hasPicture->path;
            } else {
                // 获取文件url，用于外部访问
                $url = Storage::url($hasPicture->path);
            }

            $data = [
                'id' => $hasPicture->id,
                'name' => $name,
                'url' => env('WEB_SITE_SSL', false) !== false ? secure_asset($url) :asset($url),
                'size' => $hasPicture->size
            ];
        }

        // 返回数据
        return $data;
    }
}